
. $HOME/.asdf/asdf.sh

. $HOME/.asdf/completions/asdf.bash

eval export PATH="$HOME/.rbenv/shims:${PATH}"
export RBENV_SHELL=zsh
source '/usr/lib/rbenv/libexec/../completions/rbenv.zsh'
command rbenv rehash 2>/dev/null
rbenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(rbenv "sh-$command" "$@")";;
  *)
    command rbenv "$command" "$@";;
  esac
}

export PATH="$HOME/.cargo/bin:$PATH"

export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"
# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
source $ZSH/oh-my-zsh.sh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="agnoster"

if [ "$(uname)" = "Darwin" ]; then
	export ANDROID_HOME=$HOME/Library/Android/Sdk
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
	export ANDROID_HOME=$HOME/Android/Sdk
	export CHROME_EXECUTABLE=google-chrome-stable
	alias google-chrome='google-chrome-stable'
fi

plugins=(git zshmarks)

export PATH="$HOME/.rbenv/shims:${PATH}"
export RBENV_SHELL=zsh
source "/usr/lib/rbenv/completions/rbenv.zsh"
command rbenv rehash 2>/dev/null
rbenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(rbenv "sh-$command" "$@")";;
  *)
    command rbenv "$command" "$@";;
  esac
}
export PATH="$HOME/.pyenv/shims:${PATH}"
export PYENV_SHELL=zsh
source "$HOME/.pyenv/completions/pyenv.zsh"
command pyenv rehash 2>/dev/null
pyenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  activate|deactivate|rehash|shell)
    eval "$(pyenv "sh-$command" "$@")";;
  *)
    command pyenv "$command" "$@";;
  esac
}

eval "$(starship init `basename $SHELL`)"

alias vi=nvim
alias vim=nvim

[ -s "$HOME/.jabba/jabba.sh" ] && source "$HOME/.jabba/jabba.sh"

export PATH="$PATH:$HOME/flutter/bin"
export PATH="$PATH":"$HOME/flutter/.pub-cache/bin"

export REDIS_URL="redis://localhost:6379"

export PATH="$HOME/.exenv/shims:${PATH}"
exenv rehash 2>/dev/null
exenv() {
  local command="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  shell)
    eval `exenv "sh-$command" "$@"`;;
  *)
    command exenv "$command" "$@";;
  esac
}

export LANG=ko_KR.UTF-8
export LC_ALL=ko_KR.UTF-8


# The next line updates PATH for the Google Cloud SDK.
if [ -f '$HOME/tmp/google-cloud-sdk/path.zsh.inc' ]; then . '$HOME/tmp/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '$HOME/tmp/google-cloud-sdk/completion.zsh.inc' ]; then . '$HOME/tmp/google-cloud-sdk/completion.zsh.inc'; fi

export PATH="$HOME/.asdf/shims:${PATH}"

export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

export DENO_INSTALL="/home/kodingwarrior/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

export RUST_BACKTRACE="full"

export PATH="$PATH":"$HOME/.pub-cache/bin"

export PATH="$PATH":"/usr/share/idea/bin"

if [ "$(uname)" = "Darwin" ]; then
	source ~/credentials.sh
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
	source ~/credentials.sh
fi

export PATH="$PATH":"$HOME/.maestro/bin"
export PATH="$HOME/go/bin:${PATH}"
export PATH="$HOME/.local/share/mise/shims:${PATH}"

# ============================
# Custom aliases for my own use 
# most of these have their own prefix
#
# fl - automation script for flutter
export FLUTTER_AUTOMATION='ruby ~/automation/flutter_assistant.rb'
alias flp="$FLUTTER_AUTOMATION examine_pubspec"
alias fll="$FLUTTER_AUTOMATION apply_logo"
alias flbr="$FLUTTER_AUTOMATION execute_build_runner"

alias fladr="$FLUTTER_AUTOMATION android release"
# ============================
#
#
#

######
# Alias commands 
######
if command -v lsd &>/dev/null; then 
  # Bypass this problem
  #
  # lsd: aliased to command ls -d *(/)
  alias _lsd="mise x lsd -- lsd"
  alias l="_lsd -Ah"
  alias la="_lsd -Ah"
  alias ll="_lsd -Alh"
  alias lla="_lsd -lAh"
  alias lt="_l -Ah --tree"
elif command -v exa &>/dev/null; then
  alias l="exa -s type"
  alias la="exa -s type -a"
  alias ll="exa -s type -l"
  alias llg="exa -s type -l --git"
  alias lla="exa -s type -la"
  alias lt="exa -s type --tree -l"
else
  alias l="ls -Ah"
  alias la="ls -Ah"
  alias ll="ls -lAh"
  alias lla="ls -lAh"
fi

if command -v rg &>/dev/null; then
  alias rg="rg --hidden --smart-case --context=3"
fi

if command -v zoxide &>/dev/null; then
  eval "$(zoxide init zsh)"
  alias zx="zoxide"

  function zii() {
	__zoxide_zi "$@"
  }
fi

alias mr='mise run'


################################
# Zinit
################################
zinit_home="${HOME}/.local/zsh/zinit"

declare -A ZINIT
ZINIT[HOME_DIR]="${zinit_home}"
ZINIT[BIN_DIR]="${zinit_home}/bin"
ZINIT[ZMODULES_DIR]="${zinit_home}/zmodules"
ZINIT[ZCOMPDUMP_PATH]="${HOME}/.local/zcompdump"

if [[ -s "${zinit_home}/bin/zinit.zsh" ]]
then
  source "${zinit_home}/bin/zinit.zsh"

  if [[ "$_ZSH_INIT_MINIMAL" != true ]]; then
    autoload -Uz _zinit
    (( ${+_comps} )) && _comps[zinit]=_zinit
  fi

  # https://github.com/ohmyzsh/ohmyzsh/blob/master/lib
  zinit snippet OMZ::lib/clipboard.zsh
  zinit snippet OMZ::lib/completion.zsh
  zinit snippet OMZ::lib/history.zsh
  zinit snippet OMZ::lib/key-bindings.zsh

  zinit light zsh-users/zsh-autosuggestions
  zinit light zsh-users/zsh-completions
  zinit light zsh-users/zsh-syntax-highlighting

  # zinit snippet 'https://github.com/asdf-vm/asdf/blob/master/completions/_asdf'
  zinit snippet 'https://github.com/junegunn/fzf/blob/master/shell/completion.zsh'
  zinit light chitoku-k/fzf-zsh-completions

  zinit snippet 'https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh'
else
  command -v git &>/dev/null \
    && git clone --depth=5 https://github.com/zdharma-continuum/zinit "${zinit_home}/bin"
fi

################################
# fzf
################################

export FZF_DEFAULT_OPTS="--extended --cycle --reverse --height=40% --ansi"
export FZF_COMPLETION_OPTS=""
export FZF_COMPLETION_TRIGGER=""

bindkey '^F' fzf-completion

#### command complete

# _fzf_dir_completion
#   fd .
# }

_fzf_complete_make() {
  _fzf_complete -m --preview 'echo {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    command make help
  )
}
_fzf_complete_make_post() {
  awk '{print $1}'
}

#### history
_fzf_select_history_widget() {
  BUFFER="$(history | perl -e 'print reverse <>' |
    perl -pe 's/^\s*\d+\*?\s+//' |
    awk '!a[$0]++ && length<256' |
    fzf --height=40% --scheme=history --no-sort --query "$LBUFFER" |
    sed 's/\\n/\n/')"
  CURSOR=$#BUFFER             # cursor move to line end
  zle reset-prompt
}

zle -N _fzf_select_history_widget
bindkey '^R' _fzf_select_history_widget

#### kungfu
_fzf_default_completion() {
  BUFFER="$(
    cat ~/.config/kungfu/scroll.sh |
      perl -ne 'print if !/^(#|$)/' |
      perl -pe 's/(## .+)/\e[0;32m\1\e[0m/' |
      fzf --preview='echo {} | perl -pe "s/^(.+)\s*(## .+)/\\2\n\\1/; s/;;/\n##/g;"' \
          --preview-window='down:~10:wrap' \
          --min-height 15 \
          --height ~80% \
          --scheme=history \
          --query "$LBUFFER" |
      perl -pe 's/## .+?$//'
  )"
  CURSOR=$#BUFFER
  zle reset-prompt
}
zle -N _fzf_default_completion
export fzf_default_completion=_fzf_default_completion

#### kungfu pipe
_fzf_pipe_complete_post() { perl -pe 's/## .+?$//' }
_fzf_pipe_complete() {
  _fzf_complete -m --scheme=history --preview 'echo {} | perl -pe "s/^(.+)(\s+## .+)/\\2\n\\1/"' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    cat ~/.config/kungfu/scroll.sh |
      perl -ne 'print if !/^(#|$)/ && /^\|/' |
      perl -pe 's/(## .+)/\e[0;32m\1\e[0m/'
  )
}

#### kungfu sub
_fzf_sub_complete_post() { perl -pe 's/## .+?$//' }
_fzf_sub_complete() {
  _fzf_complete -m --scheme=history --preview 'echo {} | perl -pe "s/^(.+)(\s+## .+)/\\2\n\\1/"' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    cat ~/.config/kungfu/scroll.sh |
      perl -ne 'print if !/^(#|$)/ && /^\$\(/' |
      perl -pe 's/(## .+)/\e[0;32m\1\e[0m/'
  )
}

#### command complete
_fzf_command_complete_g_post() { awk '{ print $2 }' }
_fzf_command_complete_g() {
  _fzf_complete -m --preview 'echo {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    command git status --short
  )
}

_fzf_command_complete_gb_post() { perl -pe 's/^\*//' | awk '{print $2}' }
_fzf_command_complete_gb() {
  _fzf_complete -m --preview 'echo {}' --tac --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    git for-each-ref --sort=committerdate refs/heads/ --color=always \
      --format="%(HEAD) %(color:green)%(committerdate:short)%(color:reset) %09 %(color:yellow)%(refname:short)%(color:reset) %09 %(authorname) %09 %(contents:subject)" \
      | column -t -s $'\t'
  )
}

_fzf_command_complete_di_post() { awk '{ print $3 }' }
_fzf_command_complete_di() {
  _fzf_complete -m --preview 'echo {} | awk "{print $3}" | xargs docker image inspect' --preview-window right:40%:wrap --min-height 15 -- "$@" < <(
    command docker images
  )
}

_fzf_command_complete_dc_post() { awk '{ print $1 }' }
_fzf_command_complete_dc() {
  _fzf_complete -m --preview 'echo {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    command docker container ls
  )
}

_fzf_command_complete_rise_dir() {
  _fzf_complete -m --preview 'ls {}' --preview-window down:3:wrap --min-height 15 -- "$@" < <(
    perl -e "
        chomp(\$dir = qx(pwd));
        chomp(\$dir = qx(dirname \$dir)) for (1..2);
        print qq(\$dir\n) and chomp(\$dir = qx(dirname \$dir)) while \$dir ne qq(/)"
  )
}

_fzf_my_completion_hook() {
  local prefix lbuf
  prefix=$1
  lbuf=$2

  if [[ "$prefix" == "|" ]]; then
    prefix="" eval _fzf_pipe_complete ${(q)lbuf}
  elif [[ "$prefix" == "\$(" ]]; then
    prefix="" eval _fzf_sub_complete ${(q)lbuf}
  elif [[ "$prefix" == .. ]]; then
    prefix="" eval _fzf_command_complete_rise_dir ${(q)lbuf}
  elif [[ "$prefix" == :* ]]; then
    # TODO: typing -> :g -> c-f 동작이 불편, : 말고 다른 단어가 필요. gst+c-f?
    #    - :l + c-f => current ls
    if eval "type _fzf_command_complete_${prefix#*:} > /dev/null"; then
      prefix="" eval _fzf_command_complete_${prefix#*:} ${(q)lbuf}
    else
      return 1
    fi
  else
    return 1 # default fail
  fi
}

#### overwrite completion
# https://github.com/junegunn/fzf/blob/master/shell/completion.zsh#L264
fzf-completion() {
  local tokens cmd prefix trigger tail matches lbuf d_cmds
  setopt localoptions noshwordsplit noksh_arrays noposixbuiltins

  # http://zsh.sourceforge.net/FAQ/zshfaq03.html
  # http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
  tokens=(${(z)LBUFFER})
  if [ ${#tokens} -lt 1 ]; then
    zle ${fzf_default_completion:-expand-or-complete}
    return
  fi

  cmd=$(__fzf_extract_command "$LBUFFER")

  # Explicitly allow for empty trigger.
  trigger=${FZF_COMPLETION_TRIGGER-'**'}
  [ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("")

  # When the trigger starts with ';', it becomes a separate token
  if [[ ${LBUFFER} = *"${tokens[-2]-}${tokens[-1]}" ]]; then
    tokens[-2]="${tokens[-2]-}${tokens[-1]}"
    tokens=(${tokens[0,-2]})
  fi

  lbuf=$LBUFFER
  tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}

  # Trigger sequence given
  # if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]; then
  if [[ ${#tokens} -gt 1 && ( "$tail" == "$trigger" || "$tail" == :* ) ]]; then
    d_cmds=(${=FZF_COMPLETION_DIR_COMMANDS:-cd pushd rmdir})

    [ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
    [ -n "${tokens[-1]}" ] && lbuf=${lbuf:0:-${#tokens[-1]}}

    if _fzf_my_completion_hook "$prefix" "$lbuf"; then
      zle reset-prompt
    elif eval "type _fzf_complete_${cmd} > /dev/null"; then
      prefix="$prefix" eval _fzf_complete_${cmd} ${(q)lbuf}
      zle reset-prompt
    elif [ ${d_cmds[(i)$cmd]} -le ${#d_cmds} ]; then
      _fzf_dir_completion "$prefix" "$lbuf"
    else
      _fzf_path_completion "$prefix" "$lbuf"
    fi
  # Fall back to default completion
  else
    zle ${fzf_default_completion:-expand-or-complete}
  fi
}


