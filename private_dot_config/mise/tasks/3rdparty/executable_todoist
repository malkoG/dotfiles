#!/usr/bin/env ruby
# mise description="Connect to Todoist API"

require 'optparse'
require 'csv'
require 'json'

def fetch_todolist
  `todoist --color --namespace --csv l`
end

def select_todolist(csv)
  `echo '#{csv}' | gum choose --limit 100`
end

def complete_todos(csv)
  rows = select_todolist(csv)
  rows.each_line do |line| 
    todo_id, priority, deadline, project, label, task_name = line.split(',')
    system("todoist c #{todo_id}")
    puts "Completed [#{todo_id}] #{project} #{task_name}"
  end
end


options = {}
OptionParser.new do |opts|
  # opts.on('-sTAG', '--search=TAG', 'Search image tag perfix') { options[:search] = _1 }
end.parse!

subcommand = ARGV.pop

exit(0) if subcommand.nil?

case subcommand
when "estmiate"
  # TODO - todoist m -L <labels>는 모든 label들을 flush하는 역할도 하기 때문에, 
  #        기존의 label들을 유지하면서 point/estimate label만 빼놓고 reassign하는 예외처리가 필요함
when "bulk_add"
  tasks = []
  while true
    task_name = `gum input --placeholder="Leave blank character if you want to quit"`.chomp
    break if task_name.empty?

    tasks << task_name
    puts "Added Task [#{task_name}]"
  end

  puts "Syncing....."
  tasks.each do |task|
    system("todoist q '#{task}'")
  end 

  lines = `todoist --csv l | tail -n #{tasks.size}`.chomp
  latest_tasks = lines.split("\n").map { |line| line.parse_csv }

  line = `todoist --csv projects | gum choose`
  project_id, project_name = line.split(',')
  latest_tasks.each do |task_id, *_, task_name|
    system("todoist m --project-id #{project_id} #{task_id}")
    puts "Assigned [Task #{task_name}(##{task_id})] to #{project_name}"
  end

  `todoist sync`
when "bulk_update"
  todolist = fetch_todolist
  rows = select_todolist(todoist)
  rows.each_line do |line|
    todo_id, priority, deadline, project, labels, task_name = line.parse_csv
    # content
    # priority 
    # date 
    system("todoist m #{todo_id} --content #{content} --priority #{priority} --date #{date}")
    puts "Modifies [#{todo_id}] #{project} #{task_name}"
  end
when "bulk_complete"
  todolist = fetch_todolist
  complete_todos(todolist)
end

