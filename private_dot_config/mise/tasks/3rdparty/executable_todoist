#!/usr/bin/env ruby
# mise description="Connect to Todoist API"

require 'optparse'
require 'csv'
require 'json'

def fetch_todolist
  `todoist --color --namespace --csv l`
end

def select_todolist(csv)
  `echo '#{csv}' | gum choose --limit 100`
end

def complete_todos(csv)
  rows = select_todolist(csv)
  rows.each_line do |line| 
    task_id, priority, deadline, project, label, task_name = line.split(',')
    system("todoist c #{task_id}")
    puts "Completed [#{task_id}] #{project} #{task_name}"
  end
end

ESTIMATION_POINTS = { 
  "1 point" => "point:1",
  "2 points" => "point:2",
  "3 points" => "point:3",
  "5 points" => "point:5",
  "8 points" => "point:8",
  "13 points" => "point:13",
  "21 points" => "point:21",
  "34 points" => "point:34",
}

def compose_modify_command(deadline: nil, task_name: nil, priority: "p4", project_id: nil, labels: "", task_id:)
  
  deadline_param = ""
  deadline_param = "-d '#{deadline}'" unless deadline.to_s.empty?

  priority_param = "-p #{priority.scan(/\d+/).first.to_i}"

  project_id_param = ""
  project_id_param = "-P #{project_id}" unless project_id.to_s.empty?

  labels_param = ""
  labels_param = "--label-names '#{labels.to_s.gsub("@", "")}'" unless labels.to_s.empty?

  task_name_param = ""
  task_name_param = "-c '#{task_name}'" unless task_name.to_s.empty?

  [
    "todoist", 
    "modify", 
    deadline_param, 
    priority_param, 
    project_id_param, 
    labels_param, 
    task_name_param,
    task_id
  ].join(" ")
end

options = {}
OptionParser.new do |opts|
  # opts.on('-sTAG', '--search=TAG', 'Search image tag perfix') { options[:search] = _1 }
end.parse!

subcommand = ARGV.pop

exit(0) if subcommand.nil?

# modify 연산을 수행할때, project_id를 제외한 모든 값들이 assign 되어 있어야 한다.
 
DATE_OPTIONS = <<~HERE
  #{Date.today.strftime("%Y/%m/%d")} (today)
  #{(Date.today + 1).strftime("%Y/%m/%d")} (tomorrow)
  #{(Date.today + 7).strftime("%Y/%m/%d")} (next week)
  #{(Date.today + 14).strftime("%Y/%m/%d")} (next 2 weeks)
  #{(Date.today + 30).strftime("%Y/%m/%d")} (next month)
HERE

case subcommand
when "schedule"
  todolist = fetch_todolist 
  rows = select_todolist(todolist)

  puts "Choose Deadline"
  puts "======"
  deadline = `echo '#{DATE_OPTIONS}' | gum choose`.chomp.split.first

  rows.each_line do |line|
    task_id, priority, _, __, labels, task_name = line.parse_csv

    system(
      compose_modify_command(
        deadline:,
        priority:,
        labels:,
        task_id:
      )
    )
    puts "Scheduled [Task #{task_name}(##{task_id})] to #{deadline}"
  end

  `todoist sync`
when "breakdown"
  todolist = fetch_todolist
  line = `echo '#{todolist}' | gum choose`.chomp

  _, priority, deadline, project_name, labels, parent_task_name = line.parse_csv
  puts "Selected #{parent_task_name}} in #{project_name}"
  puts "======"

  tasks = []
  while true
    task_name = `gum input --placeholder="Leave blank character if you want to quit"`.chomp
    break if task_name.empty?

    tasks << task_name
    puts "Added SubTask [#{task_name}] to Task [#{parent_task_name}]"
  end

  tasks.each do |task|
    system("todoist q '#{task}'")
  end 

  puts "Syncing....."
  `todoist sync`

  lines = `todoist --csv l | tail -n #{tasks.size}`.chomp
  latest_tasks = lines.split("\n").map { |line| line.parse_csv }

  project_name = project_name.split('/').first
  projects = `todoist --csv projects | grep '#{project_name}'`.split("\n").map { |line| line.split(',').reverse }.to_h

  latest_tasks.each do |task_id, *_, task_name|
    system(
      compose_modify_command(
        deadline:,
        priority:,
        project_id: projects[project_name],
        labels:,
        task_name: "#{task_name} < #{parent_task_name}",
        task_id:
      )
    )

    puts "Assigned [Task #{task_name}(##{task_id})] to [Project #{project_name}]"
  end

  `todoist sync`
when "estimate"
  todoist = fetch_todolist 
  rows = select_todolist(todoist)

  puts "Choose Estimation Points"
  puts "======"
  estimation_point = `echo '#{ESTIMATION_POINTS.keys.join("\n")}' | gum choose`.chomp

  rows.each_line do |line|
    task_id, priority, deadline, project, labels, task_name = line.parse_csv
    result = labels.to_s.split(',')&.reject { _1.start_with?("@point:") }.to_a
    result = [*result, ESTIMATION_POINTS[estimation_point]]

    system(
      compose_modify_command(
        deadline:,
        priority:,
        labels: result.join(','),
        task_id:
      )
    )
    puts "Assigned [Task #{task_name}(##{task_id})] to #{estimation_point}"
  end

  `todoist sync`
when "prioritize"
  todoist = fetch_todolist 
  rows = select_todolist(todoist)

  puts "Assign Priority"
  puts "======"
  priority = `echo 'p1\np2\np3\np4' | gum choose`.chomp

  rows.each_line do |line|
    task_id, _, deadline, *__, labels, task_name = line.parse_csv

    system(
      compose_modify_command(
        deadline:,
        priority:,
        labels:,
        task_id:
      )
    )
    puts "Assigned [Task #{task_name}(##{task_id})] to priority #{priority}"
  end

  `todoist sync`
when "bulk_add"
  tasks = []
  while true
    task_name = `gum input --placeholder="Leave blank character if you want to quit"`.chomp
    break if task_name.empty?

    tasks << task_name
    puts "Added Task [#{task_name}]"
  end

  line = `todoist --csv projects | gum choose`
  project_id, project_name = line.split(',')

  puts "Syncing....."
  tasks.each do |task|
    system("todoist q '#{task}'")
  end 

  lines = `todoist --csv l | tail -n #{tasks.size}`.chomp
  latest_tasks = lines.split("\n").map { |line| line.parse_csv }

  latest_tasks.each do |task_id, *_, task_name|
    system( 
      compose_modify_command( 
        project_id:,
        task_id:,
      )
    )
    puts "Assigned [Task #{task_name}(##{task_id})] to #{project_name}"
  end

  `todoist sync`
when "bulk_update"
  todolist = fetch_todolist
  rows = select_todolist(todoist)
  rows.each_line do |line|
    task_id, priority, deadline, project, labels, task_name = line.parse_csv
    # content
    # priority 
    # date 
    system("todoist m #{task_id} --content #{content} --priority #{priority} --date #{date}")
    puts "Modifies [#{task_id}] #{project} #{task_name}"
  end
when "bulk_complete"
  todolist = fetch_todolist
  complete_todos(todolist)

  `todoist sync`
end

